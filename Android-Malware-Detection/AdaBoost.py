import numpy as np
import pandas as pd

# 從各自模組中匯入 DecisionTree 與 Perceptron 模組內的各個類別
from DecisionTree_weightedGini import DecisionTree
from Perceptron import DecayingLearningRatePerceptron, AveragedPerceptron

class AdaBoost:
    def __init__(self, base_learners, n_iter=10):
        """
        base_learners: 弱分類器類別列表，例如 [DecisionTree, Perceptron, AggressiveMarginPerceptron, AveragedPerceptron]
        n_iter: 迭代次數
        """
        self.base_learners = base_learners
        self.n_iter = n_iter
        self.alphas = []   # 各輪弱分類器的權重係數
        self.models = []   # 儲存各輪選出的弱分類器模型

    def fit(self, X, y):
        n_samples = len(y)
        # 初始化所有樣本權重均等
        w = np.ones(n_samples) / n_samples
        # 將標籤從 {0,1} 轉為 {-1,1} 用於更新公式
        y_mod = 2 * y - 1

        for m in range(self.n_iter):
            best_error = np.inf
            best_model = None
            best_pred = None
            best_pred_mod = None

            # 依序訓練各弱分類器
            for learner_class in self.base_learners:
                # 如果是 Perceptron 變體，需要傳入 n_features
                if learner_class.__name__ in ["Perceptron", "DecayingLearningRatePerceptron", "AveragedPerceptron"]:
                    model = learner_class(n_features=X.shape[1])
                else:
                    model = learner_class()
                # 嘗試傳入 sample_weight，若模型不接受則略過
                try:
                    model.fit(X, y, sample_weight=w)
                except TypeError:
                    model.fit(X, y)
                # 取得預測結果，預期返回 {0,1}
                pred = model.predict(X)
                # 轉換為 {-1,1} 用於計算加權錯誤率
                pred_mod = 2 * pred - 1
                error = np.sum(w * (pred != y))
                if error < best_error:
                    best_error = error
                    best_model = model
                    best_pred = pred
                    best_pred_mod = pred_mod

            best_error = max(best_error, 1e-10)
            if best_error >= 0.5:
                print(f"Warning: 迭代 {m} 中最佳錯誤率 >= 0.5，設定 alpha 為 0")
                alpha = 0.0
            else:
                alpha = 0.5 * np.log((1 - best_error) / best_error)
            self.alphas.append(alpha)
            self.models.append(best_model)

            # 更新樣本權重
            w = w * np.exp(-alpha * y_mod * best_pred_mod)
            w = w / np.sum(w)
            print(f"迭代 {m}: 錯誤率 = {best_error:.4f}, alpha = {alpha:.4f}")

        return self

    def predict(self, X):
        agg = np.zeros(len(X))
        for alpha, model in zip(self.alphas, self.models):
            pred_mod = 2 * model.predict(X) - 1
            agg += alpha * pred_mod
        final_pred = np.where(agg >= 0, 1, 0)
        return final_pred

def main():
    # 讀取訓練資料與測試資料
    train_df = pd.read_csv("data/train.csv")
    test_df = pd.read_csv("data/test.csv")
    
    # 假設特徵欄位以 "x" 開頭，標籤欄為 "label"
    X_train = train_df.filter(regex="^x")
    y_train = train_df["label"]
    X_test = test_df.filter(regex="^x")
    y_test = test_df["label"] if "label" in test_df.columns else None


    # 讀取 evaluation 資料
    eval_df = pd.read_csv("data/eval.anon.csv")
    X_eval = eval_df.filter(regex="^x")
    
    # 定義基本學習器列表
    base_learners = [DecisionTree, DecayingLearningRatePerceptron, AveragedPerceptron]
    n_iter = 10  # 可根據需要調整迭代次數
    model = AdaBoost(base_learners, n_iter=n_iter)
    model.fit(X_train.values, y_train.values)

    # 訓練集準確率
    pred_train = model.predict(X_train.values)
    accuracy_train = np.mean(pred_train == y_train.values)
    print("訓練集準確率：", accuracy_train)

    # 測試集準確率
    pred_test = model.predict(X_test.values)
    if y_test is not None:
        accuracy_test = np.mean(pred_test == y_test.values)
        print("測試集準確率：", accuracy_test)

    # 讀取 evaluation 資料與 example id，並輸出預測結果
    eval_df = pd.read_csv("data/eval.anon.csv")
    X_eval = eval_df.filter(regex="^x")
    eval_ids = pd.read_csv("data/eval.id", header=None, names=["id"])
    pred_eval = model.predict(X_eval.values)
    output = pd.DataFrame({"example_id": eval_ids["id"], "label": pred_eval})
    output.to_csv("AdaBoost/AdaBoost.csv", index=False)
    print("evaluation 預測結果已儲存至 AdaBoost.csv")

if __name__ == "__main__":
    main()
